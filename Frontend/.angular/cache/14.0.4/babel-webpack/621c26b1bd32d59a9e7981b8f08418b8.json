{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Natan/Desktop/Project 4/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { store } from 'src/app/redux/store';\nimport { ActionType } from 'src/app/redux/action-type';\nlet ShoppingCartComponent = class ShoppingCartComponent {\n  constructor(myShoppingService) {\n    this.myShoppingService = myShoppingService;\n    this.user = store.getState().user;\n    this.shoppingCartOpen = true;\n    this.shoppingCartProducts = [];\n    this.cartOption = false;\n    this.userActive = false;\n  }\n\n  ngOnInit() {\n    //get state from redux.\n    store.subscribe(() => {\n      this.user = store.getState().user;\n      this.shoppingCartProducts = store.getState().productsOfCart;\n      this.totalPrice = store.getState().totalPrice;\n      this.userActive = store.getState().userActive;\n      this.cartOption = store.getState().cartOption;\n    });\n    const localCart = localStorage.getItem(\"myCart\");\n    setTimeout(() => {\n      if (!this.cart && !localCart) {\n        if (this.user) {\n          this.createCart();\n        }\n      }\n    }, 5000); //if you have cart in localStorage\n\n    if (localCart && !this.userActive) {\n      const action = {\n        type: ActionType.updateUserActive,\n        payload: true\n      };\n      store.dispatch(action);\n      this.cart = JSON.parse(localCart);\n      store.dispatch({\n        type: ActionType.updateCartOption,\n        payload: true\n      });\n    }\n  }\n\n  createCart() {\n    this.myShoppingService.createCart({\n      _id: this.user._id\n    }).subscribe(res => {\n      this.cart = res;\n      localStorage.setItem(\"myCart\", JSON.stringify(res));\n    }, err => alert(err.message));\n  }\n\n  continueShopping() {\n    // --- get all products of cart ----- //\n    const localCart = localStorage.getItem(\"myCart\");\n    this.myShoppingService.getAllProducts({\n      cartId: JSON.parse(localCart)._id\n    }).subscribe(res => {\n      const action = {\n        type: ActionType.getAllProductsOfCart,\n        payload: res\n      };\n      store.dispatch(action);\n      store.dispatch({\n        type: ActionType.updateCartOption,\n        payload: false\n      });\n      this.getTotalPrice();\n    }, err => alert(err.message));\n  }\n\n  getTotalPrice() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const totalPrice = _this.myShoppingService.getTotalPrice(_this.shoppingCartProducts);\n\n      const action = {\n        type: ActionType.updateTotalPrice,\n        payload: totalPrice\n      };\n      store.dispatch(action);\n    })();\n  }\n\n  clearCart() {\n    const answer = window.confirm(\"Are you sure?\");\n\n    if (!answer) {\n      return;\n    }\n\n    const myCart = this.cart;\n    this.myShoppingService.deleteCart(myCart).subscribe(() => {\n      localStorage.removeItem(\"myCart\");\n      this.createCart();\n      store.dispatch({\n        type: ActionType.updateCartOption,\n        payload: false\n      });\n      const action = {\n        type: ActionType.getAllProductsOfCart\n      };\n      store.dispatch(action);\n    }, err => alert(err.message));\n  }\n\n  collapse() {\n    const productsDiv = document.getElementById(\"productsDiv\");\n\n    if (this.shoppingCartOpen) {\n      this.shoppingCartOpen = false;\n      productsDiv.style.width = \"80%\";\n    } else {\n      this.shoppingCartOpen = true;\n      productsDiv.style.width = \"70%\";\n    }\n  }\n\n  removeProductFromCart(_id) {\n    this.myShoppingService.removeFromCart(_id).subscribe(() => {\n      const action = {\n        type: ActionType.removeFromCart,\n        payload: _id\n      };\n      store.dispatch(action);\n    }, err => alert(err.message));\n    setTimeout(() => {\n      this.getTotalPrice();\n    }, 1000);\n  }\n\n};\nShoppingCartComponent = __decorate([Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css']\n})], ShoppingCartComponent);\nexport { ShoppingCartComponent };","map":{"version":3,"mappings":"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","names":["Component","store","ActionType","ShoppingCartComponent","constructor","myShoppingService","getState","user","ngOnInit","subscribe","shoppingCartProducts","productsOfCart","totalPrice","userActive","cartOption","localCart","localStorage","getItem","setTimeout","cart","createCart","action","type","updateUserActive","payload","dispatch","JSON","parse","updateCartOption","_id","res","setItem","stringify","err","alert","message","continueShopping","getAllProducts","cartId","getAllProductsOfCart","getTotalPrice","updateTotalPrice","clearCart","answer","window","confirm","myCart","deleteCart","removeItem","collapse","productsDiv","document","getElementById","shoppingCartOpen","style","width","removeProductFromCart","removeFromCart","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Natan\\Desktop\\Project 4\\Frontend\\src\\app\\components\\shop-area\\shopping-cart\\shopping-cart.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserModel } from 'src/app/models/user';\nimport { store } from 'src/app/redux/store';\nimport { CartDetail } from 'src/app/models/cart-detail';\nimport { Cart } from 'src/app/models/cart';\nimport { ShoppingCartService } from 'src/app/services/shopping-cart.service';\nimport { ActionType } from 'src/app/redux/action-type';\n\n@Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css']\n})\nexport class ShoppingCartComponent implements OnInit {\n  public user: UserModel = store.getState().user;\n  public shoppingCartOpen: boolean = true;\n  public shoppingCartProducts: CartDetail[] = [];\n  // use string type for get the cart from localStorage\n  public cart: any;\n  public totalPrice: number;\n  public cartOption = false;\n  public userActive: boolean = false;\n\n  constructor(private myShoppingService: ShoppingCartService) { }\n\n  ngOnInit(): void {\n    //get state from redux.\n    store.subscribe(() => {\n      this.user = store.getState().user;\n      this.shoppingCartProducts = store.getState().productsOfCart;\n      this.totalPrice = store.getState().totalPrice;\n      this.userActive = store.getState().userActive;\n      this.cartOption = store.getState().cartOption;\n    });\n   \n\n    const localCart = localStorage.getItem(\"myCart\");\n\n    setTimeout(() => {\n      if (!this.cart && !localCart) {\n        if (this.user) {\n          this.createCart();\n        }\n      }\n    }, 5000);\n    //if you have cart in localStorage\n    if (localCart && !this.userActive) {\n      const action = { type: ActionType.updateUserActive, payload: true };\n      store.dispatch(action);\n      this.cart = JSON.parse(localCart);\n      store.dispatch({ type: ActionType.updateCartOption, payload: true });\n    }\n  }\n\n  public createCart(): void {\n    this.myShoppingService.createCart({ _id: this.user._id })\n      .subscribe(res => {\n        this.cart = res;\n        localStorage.setItem(\"myCart\", JSON.stringify(res));\n      }, err => alert(err.message));\n  }\n\n  public continueShopping(): void {\n    // --- get all products of cart ----- //\n    const localCart = localStorage.getItem(\"myCart\");\n    this.myShoppingService.getAllProducts({ cartId: JSON.parse(localCart)._id })\n      .subscribe(res => {\n        const action = { type: ActionType.getAllProductsOfCart, payload: res };\n        store.dispatch(action);\n        store.dispatch({ type: ActionType.updateCartOption, payload: false });\n        this.getTotalPrice();\n      }, err => alert(err.message));\n  }\n\n  public async getTotalPrice() {\n    const totalPrice = this.myShoppingService.getTotalPrice(this.shoppingCartProducts);\n    const action = { type: ActionType.updateTotalPrice, payload: totalPrice };\n    store.dispatch(action);\n  }\n  public clearCart(): void {\n    const answer = window.confirm(\"Are you sure?\");\n    if (!answer) {\n      return;\n    }\n    const myCart: any = this.cart;\n    this.myShoppingService.deleteCart(myCart)\n      .subscribe(()=> {\n        localStorage.removeItem(\"myCart\");\n        this.createCart();\n        store.dispatch({ type: ActionType.updateCartOption, payload: false });\n        const action = { type: ActionType.getAllProductsOfCart,};\n        store.dispatch(action);\n      }, err => alert(err.message));\n  }\n\n  public collapse(): void {\n    const productsDiv = document.getElementById(\"productsDiv\");\n    if (this.shoppingCartOpen) { this.shoppingCartOpen = false; productsDiv.style.width = \"80%\" }\n    else { this.shoppingCartOpen = true; productsDiv.style.width = \"70%\" }\n  }\n\n  public removeProductFromCart(_id: string): void {\n    this.myShoppingService.removeFromCart(_id)\n      .subscribe(() => {\n        const action = { type: ActionType.removeFromCart, payload: _id };\n        store.dispatch(action);\n      }, err => alert(err.message));\n    setTimeout(() => {\n      this.getTotalPrice();\n    }, 1000);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}